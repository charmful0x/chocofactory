rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isUserAuthenticated(address) {
      return isAnyAuthenticated() && request.auth.uid == address;
    }

    function documentPath(paths) {
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function nftContract(name, address) {
      return get(documentPath('v1', name, 'nftContract', address)).data
    }

    match /v1/{networkName}/nftContract/{nftContractAddress} {
      match /nftContract/{nftContractAddress} {
        allow read: if isUserAuthenticated(resource.data.ownerAddress);
    
        match /metadata/{tokenId} {
          allow read, write: if isUserAuthenticated(nftContract(networkName, nftContractAddress).ownerAddress);
        }
      }
    }
  }
}
