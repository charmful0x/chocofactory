rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(address) {
      return isAnyAuthenticated() && request.auth.uid == address;
    }

    function documentPath(paths) {
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    function existingData() {
      return resource.data;
    }

    function getData(path) {
      return get(path).data;
    }

    function nftContract(virsion, chainId, address) {
      return getData(documentPath([virsion, chainId, 'nftContract', address]));
    }

    match /{virsion}/{network} {
      match /nftContract/{address} {
        allow read: if isUserAuthenticated(existingData().ownerAddress);
    
        match /metadata/{tokenId} {
          allow read, create, update, delete: if isUserAuthenticated(nftContract(virsion, network, address).ownerAddress);
        }
      }
    }
  }
}
